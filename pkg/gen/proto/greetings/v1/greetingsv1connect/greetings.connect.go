// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: greetings/v1/greetings.proto

package greetingsv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/baleen-dyamaguchi/go-grpc-to-connect/pkg/gen/proto/greetings/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// GreetingsServiceName is the fully-qualified name of the GreetingsService service.
	GreetingsServiceName = "greetings.v1.GreetingsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GreetingsServiceGetGreetingsProcedure is the fully-qualified name of the GreetingsService's
	// GetGreetings RPC.
	GreetingsServiceGetGreetingsProcedure = "/greetings.v1.GreetingsService/GetGreetings"
)

// GreetingsServiceClient is a client for the greetings.v1.GreetingsService service.
type GreetingsServiceClient interface {
	GetGreetings(context.Context, *connect.Request[v1.GetGreetingsRequest]) (*connect.Response[v1.GetGreetingsResponse], error)
}

// NewGreetingsServiceClient constructs a client for the greetings.v1.GreetingsService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGreetingsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) GreetingsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	greetingsServiceMethods := v1.File_greetings_v1_greetings_proto.Services().ByName("GreetingsService").Methods()
	return &greetingsServiceClient{
		getGreetings: connect.NewClient[v1.GetGreetingsRequest, v1.GetGreetingsResponse](
			httpClient,
			baseURL+GreetingsServiceGetGreetingsProcedure,
			connect.WithSchema(greetingsServiceMethods.ByName("GetGreetings")),
			connect.WithClientOptions(opts...),
		),
	}
}

// greetingsServiceClient implements GreetingsServiceClient.
type greetingsServiceClient struct {
	getGreetings *connect.Client[v1.GetGreetingsRequest, v1.GetGreetingsResponse]
}

// GetGreetings calls greetings.v1.GreetingsService.GetGreetings.
func (c *greetingsServiceClient) GetGreetings(ctx context.Context, req *connect.Request[v1.GetGreetingsRequest]) (*connect.Response[v1.GetGreetingsResponse], error) {
	return c.getGreetings.CallUnary(ctx, req)
}

// GreetingsServiceHandler is an implementation of the greetings.v1.GreetingsService service.
type GreetingsServiceHandler interface {
	GetGreetings(context.Context, *connect.Request[v1.GetGreetingsRequest]) (*connect.Response[v1.GetGreetingsResponse], error)
}

// NewGreetingsServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGreetingsServiceHandler(svc GreetingsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	greetingsServiceMethods := v1.File_greetings_v1_greetings_proto.Services().ByName("GreetingsService").Methods()
	greetingsServiceGetGreetingsHandler := connect.NewUnaryHandler(
		GreetingsServiceGetGreetingsProcedure,
		svc.GetGreetings,
		connect.WithSchema(greetingsServiceMethods.ByName("GetGreetings")),
		connect.WithHandlerOptions(opts...),
	)
	return "/greetings.v1.GreetingsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case GreetingsServiceGetGreetingsProcedure:
			greetingsServiceGetGreetingsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedGreetingsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGreetingsServiceHandler struct{}

func (UnimplementedGreetingsServiceHandler) GetGreetings(context.Context, *connect.Request[v1.GetGreetingsRequest]) (*connect.Response[v1.GetGreetingsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("greetings.v1.GreetingsService.GetGreetings is not implemented"))
}
